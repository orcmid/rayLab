Win32-display.txt 0.0.4             UTF-8                         2023-10-20
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                         Native Windows raylib Laboratory
                         ================================


<https://github.com/orcmid/rayLab/blob/main/projects/nfoPixels/Win32-display.txt>

                    NFOPIXELS GRAPHICAL DISPLAY NORMALIZER

                    Win32 Display Characteristics Detection
                    ---------------------------------------

    This note captures what I have learned considering discovery of display
    characteristics from a Win32 program used as part of raylib and possibly
    other applications.  These provisions govern how nfoPixels will operate,
    depending on the target Windows system.

    This means that the first thing to discern is the version of Windows that
    the application is running on.  Then we calibrate facilities by earliest
    version the facility is available in, Windows 7 and earlier being the
    goal for minimal operation.

DETECTING WINDOWS VERSION

    The detection of a Windows Version is muddled because the response does
    not always indicate whether a facility is present or not.  The
    recommendation is to check for the specific feature.  See
    <https://learn.microsoft.com/en-us/windows/win32/sysinfo/getting-the-system-version>.
    The following information is still a bit too cryptic:
    <https://learn.microsoft.com/en-us/windows/win32/sysinfo/operating-system-version>.

    I am willing to require Windows 7 or later, especially since only x64
    builds are being entertained.  So version 6.2 or greater is appropriate.
    I can also use the Version API Helper functions to determine that.

    IMPORTANT: I do not assume that a manifest has been created, so the
    no-manifest response for Windows 8.0 and later will happen.  That still
    satisfies the IsWindows7OrGreater case that interests me.  The program
    nfoGetVer.c (and mkGetVer.bat script) confirm that

      * Without a manifest, the reported version is 6.2.
      * GetVersionExA is supported on Windows 10/11 at this point.
      * The compile command does not need to be told to include kernel.lib.

    IMPORTANT 2: I am assuming that <VersionHelpers.h> is present though, with
    builds happening using SDKs at least as recent as Windows 8.1 ones.
    <https://learn.microsoft.com/en-us/windows/win32/api/versionhelpers/nf-versionhelpers-iswindows7orgreater>.
    It is tricky to test for this at compile time though.

    <windows.h> must be included along with the Helper include.  Then the
    program nfoGetVHelper.c compiles and executes just as nfoGetVer.c does.

    This is important:
    <https://blogs.windows.com/windowsdeveloper/2017/05/19/improving-high-dpi-experience-gdi-based-desktop-apps/>


DETECTING MONITOR DPI

    Note that preprocessor-defined USER_DEFAULT_SCREEN_DPI can be queried for.
    Also, preprocessor message type WM_DPICHANGED is a message that apparently
    arose with Windows 8.1 or later and that could be checked for as well.

    HRESULT GetProcessDpiAwareness
              (                 HANDLE hprocess,
                 PROCESS_DPI_AWARENESS *value
                 );

    this is defined in <shellscalingapi.h> but we might want to know more
    before including it.

    for hprocess == NULL will return the value for the current process.  The
    PROCESS_DPI_AWARENESS is an enumeration type such that
                                  PROCESS_DPI_UNAWARE = 0,
                             PROCESS_SYSTEM_DPI_AWARE = 1,
                        PROCESS_PER_MONITOR_DPI_AWARE = 2

    There is also a DPI_AWARENESS_CONTEXT to use rather than using the
    application manifest.  That's because of the per-monitor business.

    PROCESS_DPI_UNAWARE is the default. The system will automatically scale
    these and PROCESS_SYSTEM_DPI_AWARE apps when DPI change messages happen.

    This function is said to be identical to

      GetAwarenessFromDpiAwarenessContext
         ( GetThreadDpiAwarenessContext() );

    It is difficult to see how that comes to be, since no value parameter is
    provided.

       DPI_AWARENESS_CONTEXT GetThreadDpiAwarenessContext();

    is available (via Windows.h) since Windows 10 version 1607 as is.  If the
    thread context has never been set, the value returned is the default
    DPI_AWARENESS_CONTEXT for the process, and that's what we want.

       DPI_AWARENESS GetAwarenessFromDpiAwarenessContext
                          ( DPI_AWARENESS_CONTEXT value);

    Here it gets useful.  DPI_AWARENESS_CONTEXT is called a handle but it is
    apparently a #defined thing.  And it seems to have more values than
    PROCESS_DPI_AWARENESS defines as an enumeration. There are two new cases,
    DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_2 (Creators Windows 10 Update) and
    DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED (with Windows 10 1809).

    I am suspicion of the DPI_AWARENESS_CONTEXT being described as a type
    and also having a numeric value.  This is also at odds with there being
    multiple types of information in it or whatever those defines really mean.

    I have to run a test case to see what's going on.  This looks like a job
    for a showdefs procedure.

    ShowDpiAwareness.c Provides one case using the DpiAwarenessContext case.
    The mkShowDpiAwareness.bat file reflects the need for User32.lib.




*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                            2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. Win32 Display Characteristics Detection. rayLab project
   text file Win32-display.txt version 0.0.4 dated 2023-10-20, available on
   the Internet as a version of
 <https://github.com/orcmid/rayLab/blob/main/projects/nfoPixels/Win32-display.txt>

TODO

 * I have been setting Windows HDR at the display level.  Windows 10 on DEL
   XPS 8500, Windows 11 on Microsoft Surface Laptop Studio.
<https://support.microsoft.com/en-us/windows/what-is-windows-hd-color-1afce12f-1f5a-88be-fcd8-bf16303a52f8>
<https://support.microsoft.com/en-us/windows/calibrate-your-built-in-display-for-hdr-content-in-windows-de1c66fa-6cc0-b327-e73a-1bac6bd46bc0>
   The calibration information is the same for Win10 and Win11
   I chose 25 because I don't want paper white to be overly bright.  That
   seems to work well on the Dell S3422DWG, although I notice blacks are a
   a bit deeper.  But text is fine.  Not all versions of Windows 10 have this
   facility and I will need to cope with that too.

 * Find the oldest-supported features.  Features that arrived in Windows 10 or
   in Windows 8.1 need to be checked for in the library being used (usually
   to see if the DEFINEs are present from windows.h and the ilk).  Functions
   available to Windows 7 desktop clients are preferred.

 * Review "DisplayConfigGetDeviceInfo", "EnumDisplaySettingsA",
   "EnumDisplaySettingsExA", "EnumPropsA", "EnumbPropsExA",
   "GetDpiAwarenessContextForProcess", GetDpiForSystem, GetDPIForWindow
   GetMonitorInfoA, GetProcessWindowStation,GetSystemDpiForProcess,
   GetThreadDpiAwarenessContext, GetWindowsDpiAwarenessContext,
   GetWindowDpiHostingBehavior, GetProcessDPIAwareness,
   SetProcessDpiAwarenessContext,SetThreadDpiAwarenessContext, those are from
   DPI_AWARENESS_CONTEXT

 * Possibly also important: HIGHCONTTASTA, MONITORINFO, MONITORINFOEX,
   SERIALKEYSA, SOUNDSENTRYA, STICKYKEYS, TOGGLEKEYS

 * High DPI is described at
   <https://learn.microsoft.com/en-us/windows/win32/api/_hidpi/>.
   DPI_AWARENESS enumerations identify dots per inch setting
   MONITOR_DPI_TYPE identifies dpi for a monitor
   PROCESS_DPI_AWARENESS how much scaling an application performs for dpi
   versus how much is done by the system.
   GetDpiForMonitor queries the dpi of a display.
   GetDpiForSystem returns the system dpi.

 * It looks like SetDpiAwareness(PROCESS_DPI_AWARENESS value)
   could be used to learn it has been set already or specify that it will be
   handled by the app.  This only works since Windows 8.1 desktop apps.

 * SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT dpiCtx) may be better.
   It is defined in winuser.h but it is only supported since Windows 10 v1607.
   It also replaces a given one, returning the one replaced else NULL for
   no dice.

 * We need to see if we can check whether different DPI Awareness support is
   present.  The DPI_AWARENESS enumeration (windef.h) is available only for
   Windows 10 and later desktop apps.  GetDpiAwarenessContextForProcess will
   get things for the current process when given a NULL handle.

 * I need to write small test applications to see how to get DPI information
   and also deal with automatic or manifest set scaling.

 * The test applications need to be considerate of Windows 10/11, Windows 8.1,
   and earlier than Windows 8.1.

 * On Windows 10/11, GetDpiFromDpiAwarenessContext
                         (GeDpiAwarnessContextforProcess(NULL))
         returns a UINT DPI value, but 0 for per-monitor Contexts.
   Also, DPI_AWARENESS_CONTEXT_UNAWARE will be defined. We also need to be
   attentive to DPI_AWARENESS_CONTECT_UNAWARE_GDISCALED.  This is all
   Windows 10/11.



*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.4 2023-10-20T19:23Z Look into HDR settings also
 0.0.3 2023-10-18T12:55Z Advance to ShowDpiAwareness.c
 0.0.2 2023-10-14T22:08Z Reflect results from nfoGetVHelper.c
 0.0.1 2023-10-14T17:23Z Initial consideration of Windows Version detection
 0.0.0 2023-10-14T16:30Z placeholder derived from nfoPixels.txt 0.0.1.

                    ***** end of Win32-display.txt *****
