nfoPixels.txt 0.1.0                 UTF-8                         2024-04-30
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                         Native Windows raylib Laboratory
                         ================================


      <https://github.com/orcmid/rayLab/blob/main/projects/projects.txt>

            EXPLORATION OF RAYLAB USAGE IN NATIVE WINDOWS APPS

                    nfoPixels Graphical Display Normalizer
                    --------------------------------------

    nfoPixels consists of a header file and one or more implementation
    files for reporting and adjusting to the characteristics of raster
    displays.  Operations are in terms of pixel coordinates in standard
    graphical form: X and Y both increasing with (0,0) in the upper left
    corner in the viewer's perspective.

    nfoPixels is based, as is raylib, on the "standard" DPI being taken as
    96 for Windows and 72 for Apple.  There is some possible trickery though
 <https://en.wikipedia.org/wiki/Dots_per_inch#Computer_monitor_DPI_standards>.

    For every platform, the scaling business needs to be addressed in a way
    that has desktop builds of a single program produce visually-comparable
    display results when installed unchanged on computers having different
    displays.  nfoPixels provides functions for accomplishing that run-time
    accomodation of display characteristics and the display intended by the
    program author.

    The architecture of nfoPixels allows for customization to support more
    platforms by additions, preserving a portable API.  The reference
    implementation is specific to Windows desktop applications because I have
    no means to support other cases.

    nfoPixels will be included in the VCrayApp cache for employment in
    VCrayConfirm compilations, demonstrating its effectiveness for VCrayApp
    projects on the Win32 platform and VS Build Tools featured with VCrayApp.

    AVOIDING MISSION CREEP: It is important to have a confirmed understanding
    of the Microsoft Windows cases for execution on Windows 7 and later.  The
    compilations are expected to all be for x64 versions of Windows and the
    basic raylib compilation scheme for single-monitor applications is the
    scope.  There is no intention to support multiple monitors, changes in
    DPI, and so on.  We are confining ourselves to the elementary world in
    which BGI was established, adjusting to modern platforms but not going
    crazy for all of the variations in operation that are now possible.

    Ideally, we can use integer arithmetic scale factors in some cases.  On
    Windows, Bing Chat recommended this C# solution

       AI-generated code. Review and use carefully. More info on FAQ.

       public static int GetWindowsScaling()
       {
           return (int)( 100 * Screen.PrimaryScreen.Bounds.Width /
                         SystemParameters.PrimaryScreenWidth );
       }

    I need to check this.  Then I need to be able to detect whether the
    information is here.

    THAT HAVING BEEN SAID: This is the 1.0 scoping.  It is important to learn
    about more-advanced situations and see what might be done for them.  It
    is not urgent and the 1.0 API will be rigorously preserved.  We only have
    this because we want single platform-specific executables to appear
    properly and automatically when installed on computers having varying
    display characteristics that impact the usability of the raylib app.

    nfoPixels is offered as a companion to raylib and similar graphical-
    application APIs.  There are no modifications or customizations to raylib.
    This does mean that application developers must rely on the nfoPixels
    API as part of their use of raylib API functions. nfoPixels operates
    independently of raylib, which need not be initialized for nfoPixels to
    operate correctly.

    ABOUT SCREEN CAPTURES.  What is to be understood about the different
    screen captures is difficult to understand if the DPI and scaling are not
    reflected. The HDR effects are not accurately reflected in the HyperSnap
    captures. In particular, improved shadow depth is not reflected for the
    W11 Video/Streaming cases.

MANIFEST

           nfoPixels.txt  This synopsis and manifest

       Win32-display.txt  Analysis for Win32 Display Characteristics Detection

            mkGetVer.bat  compiling nfoGetVer.c
        mkGetVHelper.bat  compiling nfoGetVHelper.c
           mknpxShow.bat  compiling npxShow.c
    mkShowDpiContext.bat  compiling ShowDpiContext
           nfoGetVer.c    Program to get version with GetVersionExA
       nfoGetVHelper.c    Program to use Windows Version Helper (recommended)
           nfoPixels.h    Intended platform-independent API definition
     nfoPixels-Win32.c    Windows (and Window.h APIs) platform-specific
                          nfoPixels implementation
             npxShow.c    Program to demonstrate nfoPixel.h inclusion
                          and API usage
      ShowDpiContext.c    Program to obtain DPI Awareness from Windows.

     W10-2023-10-15-1034-110dpi-Scaled.png   918x707 in pixels
               Lack of VCrayConfirm 0.1.15 scaling is not problematic
     W10-2023-10-15-1037-SystemDisplay.png   492x491 in pixels
     W10-2023-10-20-1208-WindowsHDSettings01.png 1032 x 981 in pixels
     W10-2023-10-20-1208-WindowsHDSettings01.png 1032 x 1310 in pixels
               Captures on the display-level treatment of HDR, W10/W11
     W10-2023-10-21-0918-DisplaySettings.png 1032 x 1136 in pixels
     W10-2023-10-21-0910-AdvancedScaling.png 1032 x 1136 in pixels
               More Details on the Display Settings dialogs for Windows 10/11
     W11-2023-10-15-1006-200dpi-Scaled.png  1236x1020 in pixels
               Lack of VCrayConfirm 0.1.15 scaling is a serious defect
     W11-2023-10-15-1009-SystemDisplay.png   1682x500 in pixels
     W11-2023-10-21-1217-RecommendedStreaming.png  2204 x 1564 in pixels
     W11-2023-10-21-1221-HDRDisplayLimitation.png  1717 x 1436 in pixels
     W11-2023-`0-21-1225-HDRStreamingCalibration.png  2367 x 1573 in pixels

    W11xW10-2023-10-15-1700-SideBySideNormalized.png (view at 100%)
        This demonstrates the two Scaled images adjusted so they appear at the
        same DPI, whatever resolution this is viewed at.  Notice that scaling
        is done by Windows for GUI elements, but for raster images created
        using fixed dimensions in pixels there is no automatic-scaling to
        adjust for differences in display resolution and any user-selected
        GUI scaling.  The 200dpi image does show that the GUI elements of the
        frame, such as the title bar, are scaled.  That doesn't happen for
        some apps.


*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                           2023-2024 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. nfoPixels Graphical Display Normalizer.  rayLab project
   text file nfoPixels.txt version 0.1.0 dated 2024-04-30, available on the
   Internet as a version of
 <https://github.com/orcmid/rayLab/blob/main/projects/nfoPixels/nfoPixels.txt>

TODO

 * IMPORTANT: The resetting of nfoPixels should allow the user to specify the
   understood resolution that the program is created for.  Otherwise, the
   default resolution will be employed.  Because we don't expect the caller
   to have access to the library definition, we also need a call that
   provides the libraries default DPI setting.

 * Research the Win32 libraries and discern the discoverable features going
   back to at least Windows 7.  This will be documented in Win32-display.txt

 * Accessibility is related although different.  This might be an nfoAccess
   matter. I should move the accessibility items from Win32-display.txt.

 * I need to understand about multiple displays and multiple desktops and what
   is a good model for them, even though the fall-line easy case is going to
   be one monitor and a single desktop on that monitor.  It may be that a
   raylib App is being started from a particular desktop and that might have
   to be figured in.  I don't like the mission creep.  I do think it needs to
   be thought about even if not acted on, so that I don't lock out extension
   into such areas.

 * These explorations and screen captures should be segregated as "probes"
   once there is enough complete for initial nfoPixels availability.

 * The idea is to be able to, for the Win32 Desktop case, discern that a
   particular feature is supported or not. Some cases can be determined at
   compile time.  Others depend on determining that a Windows .dll entry
   point is defined.  I would like to avoid that last situation.

 * The default setup is always with no scaling.  That will change with the
   Refresh command.  This will also be useful if the default screen is changed
   or the scaling changes in some way. The 1.0 API is intended to stay simple
   in this way.

 * A short prefix might be npx with whatever operations there are for that
   interface.  Maybe that is all for the integer Pixel scaling of integers.


*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.1.0  2024-04-30T16:50Z Update the manifest, reflect nfoPixel-Win32.c
        platforming, and touch-up the notes to reflect my intention better
 0.0.11 2024-01-05T17:02Z Update TODOs, consider getting/setting dpi assumed
 0.0.10 2023-11-18T20:42Z Bring current, lookat scale factor recovery
 0.0.9 2023-10-24T15:12Z TODOs on probing feature detection
 0.0.8 2023-10-21T20:45Z Touch-up
 0.0.7 2023-10-21T19:48Z Add W11 HDR captures
 0.0.6 2023-10-21T16:46Z Expanded synopsis, more screen captures
 0.0.5 2023-10-20T19:34Z Initial notes on HDR
 0.0.4 2023-10-16T00:13Z Demonstrate scalings comparison side-by-side.
 0.0.3 2023-10-14T22:16Z Reflect nfoGetVer.c and nfoGetVHelper.c
 0.0.2 2023-10-14T16:37Z Split out to Win32-display.txt for investigations
 0.0.1 2023-10-14T02:48Z Noodling in the TODO
 0.0.0 2023-10-13T20:47Z placeholder for building up to VC building case.

                      ***** end of nfoPixels.txt *****
