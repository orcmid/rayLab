Win32-display.txt 0.0.0             UTF-8                         2023-10-14
*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                         Native Windows raylib Laboratory
                         ================================


<https://github.com/orcmid/rayLab/blob/main/projects/nfoPixels/Win32-display.txt>

                    NFOPIXELS GRAPHICAL DISPLAY NORMALIZER

                    Win32 Display Characteristics Detection
                    ---------------------------------------

    This note captures what I have learned considering discovery of display
    characteristics from a Win32 program used as part of raylib and possibly
    other applications.  These provisions govern how nfoPixels will operate,
    depending on the target Windows system.

    This means that the first thing to discern is the version of Windows that
    the application is running on.  Then we calibrate facilities by earliest
    version the facility is available in, Windows 7 and earlier being the
    goal for minimal operation.

DETECTING WINDOWS VERSION





*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                            2023 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 ATTRIBUTION

   Hamilton, Dennis E. Win32 Display Characteristics Detection. rayLab project
   text file Win32-display.txt version 0.0.0 dated 2023-10-14, available on
   the Internet as a version of
 <https://github.com/orcmid/rayLab/blob/main/projects/nfoPixels/Win32-display.txt>

TODO

 * Find the oldest-supported features.  Features that arrived in Windows 10 or
   in Windows 8.1 need to be checked for in the library being used (usually
   to see if the DEFINEs are present from windows.h and the ilk).  Functions
   available to Windows 7 desktop clients are preferred.

 * Review "DisplayCnfigGetDeviceInfo", "EnumDisplaySettingsA",
   "EnumDisplaySettingsExA", "EnumPropsA", "EnumbPropsExA",
   "GetDpiAwarenessContextForProcess", GetDpiForSystem, GetDPIForWindow
   GetMonitorInfoA, GetProcessWindowStation,GetSystemDpiForProcess,
   GetThreadDpiAwarenessContext, GetWindowsDpiAwarenessContext,
   GetWindowDpiHostingBehavior, GetProcessDPIAwareness,
   SetProcessDpiAwarenessContext,SetThreadDpiAwarenessContext, those are from
   DPI_AWARENESS_CONTEXT

 * Possibly also important: HIGHCONTTASTA, MONITORINFO, MONITORINFOEX,
   SERIALKEYSA, SOUNDSENTRYA, STICKYKEYS, TOGGLEKEYS

 * High DPI is described at
   <https://learn.microsoft.com/en-us/windows/win32/api/_hidpi/>.
   DPI_AWARENESS enumerations identify dots per inch setting
   MONITOR_DPI_TYPE identifies dpi for a monitor
   PROCESS_DPI_AWARENESS how much scaling an application performs for dpi
   versus how much is done by the system.
   GetDpiForMonitor queries the dpi of a display.
   GetDpiForSystem returns the system dpi.

 * It looks like SetDpiAwareness(PROCESS_DPI_AWARENESS value)
   could be used to learn it has been set already or specify that it will be
   handled by the app.  This only works since Windows 8.1 desktop apps.

 * SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT dpiCtx) may be better.
   It is defined in winuser.h but it is only supported since Windows 10 v1607.
   It also replaces a given one, returning the one replaced else NULL for
   no dice.

 * We need to see if we can check whether different DPI Awareness support is
   present.  The DPI_AWARENESS enumeration (windef.h) is available only for
   Windows 10 and later desktop apps.  GetDpiAwarenessContextForProcess will
   get things for the current process when given a NULL handle.

 * I need to write small test applications to see how to get DPI information
   and also deal with automatic or manifest set scaling.

 * The test applications need to be considerate of Windows 10/11, Windows 8.1,
   and earlier than Windows 8.1.

 * On Windows 10/11, GetDpiFromDpiAwarenessContext
                         (GeDpiAwarnessContextforProcess(NULL))
         returns a UINT DPI value, but 0 for per-monitor Contexts.
   Also, DPI_AWARENESS_CONTEXT_UNAWARE will be defined. We also need to be
   attentive to DPI_AWARENESS_CONTECT_UNAWARE_GDISCALED.  This is all
   Windows 10/11.



*---|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

 0.0.0 2023-10-14T16:30Z placeholder derived from nfoPixels.txt 0.0.1.

                    ***** end of Win32-display.txt *****
